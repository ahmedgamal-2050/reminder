"use strict";(self.webpackChunktime_manager_app=self.webpackChunktime_manager_app||[]).push([["src_app_components_dashboard_components_tasks_tasks_module_ts"],{2336:(d,c,t)=>{t.r(c),t.d(c,{TasksModule:()=>l});var o=t(3786),a=t(4106),g=t(4364);var h=t(4436),v=t(8902);let n=class{constructor(s){this.taskService=s,this.taskList=[],this.filteredTaskList=[],this.searchValue="",this.colorList=["light","info","primary","warning","danger","success","secondary"]}ngOnInit(){this.taskList=this.taskService.getTaskList()}openModal(s){this.selectedTask=s,$("#taskModal").modal("show")}createTask(s){this.taskList.push(s),this.taskService.updateTask(this.taskList),$("#taskModal").modal("hide"),alert(`${s.taskName} task created successfully`)}editTask(s){for(let r=0;r<this.taskList.length;r++)this.taskList[r].id===s.id&&(this.taskList[r]=s,this.taskList[r].showMenu=!1);this.taskService.updateTask(this.taskList),$("#taskModal").modal("hide"),alert(`${s.taskName} task updated successfully`)}toggleTaskMenu(s){this.taskService.toggleTaskMenu(s,this.taskList)}showColorMenu(s){this.taskService.showColorMenu(s,this.taskList)}hideColorMenu(s){this.taskService.hideColorMenu(s,this.taskList)}changeColor(s,r){this.taskService.changeColor(s,this.taskList,r)}taskCompleted(s){this.taskService.taskCompleted(s,this.taskList)}togglePinTask(s){this.taskService.togglePinTask(s,this.taskList)}archiveTask(s){this.taskService.archiveTask(s,this.taskList)}deleteTask(s){this.taskService.deleteTask(s,this.taskList)}search(s){this.filteredTaskList=s?this.taskService.search(s,this.taskList):[]}openReminderModal(s){this.selectedTask=s,$("#reminderModal").modal("show")}editReminder(s){this.taskService.editReminder(s,this.taskList),$("#reminderModal").modal("hide")}};n.ctorParameters=()=>[{type:v.M}],n=(0,o.gn)([(0,a.wA2)({selector:"app-tasks",template:'\x3c!-- Search --\x3e\r\n<div class="row justify-content-center align-items-center p-5">\r\n  <div class="col-lg-6 col-md-8 col-sm-10">\r\n    <div class="alert-primary p-2 input-search-group">\r\n      <span class="search-icon">\r\n        <img src="./assets/icons/search.svg" width="20" height="20" />\r\n      </span>\r\n      <input type="text" class="ps-2 form-search-control text-primary"\r\n             placeholder="Search Task..." [(ngModel)]="searchValue" (input)="search(searchValue)">\r\n    </div>\r\n  </div>\r\n</div>\r\n\x3c!-- Page Title --\x3e\r\n<div class="bg-light p-3 mb-4 w-100">\r\n  <img src="./assets/icons/tasks.svg" width="20" height="20" />\r\n  <span class="ms-2 text-primary">Tasks</span>\r\n</div>\r\n\x3c!-- Page Content --\x3e\r\n\x3c!-- Create New Task --\x3e\r\n<div class="row mx-auto justify-content-between rounded w-75 create-task mb-2"\r\n     (click)="openModal(emptyTask)">\r\n  <div class="col-3 p-3">\r\n    <img src="./assets/icons/create.svg" width="20" height="20" />\r\n    <span class="ps-3">Create New Task</span>\r\n  </div>\r\n  <div class="col-auto">\r\n    <div class="row">\r\n      <div class="col-auto p-3">\r\n        <img src="./assets/icons/more-black.svg" width="20" height="20" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\x3c!-- Filtered Task Menu --\x3e\r\n<div *ngIf="filteredTaskList?.length && searchValue">\r\n  <div class="row mx-auto justify-content-between rounded w-75 border mb-2"\r\n       [ngClass]="task.taskColor && !task.done && !task.deleted ? \'alert-\'+ task.taskColor + \' border-\'+ task.taskColor : \'\'"\r\n       [class.pinned]="task.pinned"\r\n       [class.alert-success]="task.done"\r\n       [class.border-success]="task.done"\r\n       [class.alert-danger]="task.deleted"\r\n       [class.border-danger]="task.deleted"\r\n       *ngFor="let task of filteredTaskList">\r\n    \x3c!-- Left Menu Side --\x3e\r\n    <div class="col-auto p-3">\r\n      <div class="d-flex align-items-center">\r\n        <div class="border rounded" style="height:24px;width:24px;"\r\n             [ngClass]="(task.taskColor && !task.done && !task.deleted) ? \'border-\'+ task.taskColor : \'\'"\r\n             [class.bg-success]="task.done"\r\n             [class.bg-danger]="task.deleted"\r\n             (click)="taskCompleted(task)"></div>\r\n        <div class="ms-3"\r\n             [class.text-decoration-line-through]="task.done || task.deleted"\r\n             [class.text-success]="task.done"\r\n             [class.text-danger]="task.deleted">\r\n          {{task.taskName}}\r\n        </div>\r\n        <div class="d-flex" *ngIf="!task.colorMenu">\r\n          <div class="ms-3 border rounded-pill py-1-5 px-2 fs-8" *ngIf="task.category"\r\n               [ngClass]="task.deleted ?\'alert-danger border-danger\' : \'alert-primary border-primary\'">\r\n            {{task.category}}\r\n          </div>\r\n          <div class="ms-3 border rounded-pill py-1-5 px-2 fs-8"\r\n               *ngIf="task.reminder && !task.done"\r\n               [ngClass]="task.deleted ?\'alert-danger border-danger\' : \'alert-primary border-primary\'">\r\n            <img src="./assets/icons/time.svg" width="14" height="14" />\r\n            <span class="ms-2">{{ task.dateStatus? task.dateStatus :  task.reminder | date:\'dd MMM\' }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \x3c!-- Right Menu Side --\x3e\r\n    <div class="col-auto d-flex">\r\n      \x3c!-- Boolean Results --\x3e\r\n      <div class="col-auto row me-2 align-items-center"\r\n           *ngIf="(task.done || task.pinned || task.archived || task.deleted) && !task.showMenu && !task.colorMenu">\r\n        <div class="col me-1" *ngIf="task.done">\r\n          <img src="./assets/icons/pocket-success.svg" width="20" height="20" />\r\n        </div>\r\n        <div class="col me-1" *ngIf="task.pinned">\r\n          <img src="./assets/icons/pin-warning.svg" width="20" height="20" />\r\n        </div>\r\n        <div class="col me-1" *ngIf="task.archived">\r\n          <img src="./assets/icons/archive-primary.svg" width="20" height="20" />\r\n        </div>\r\n        <div class="col me-1" *ngIf="task.deleted">\r\n          <img src="./assets/icons/trash-danger.svg" width="20" height="20" />\r\n        </div>\r\n      </div>\r\n      \x3c!-- More Actions --\x3e\r\n      <div class="bg-dark col-auto row">\r\n        <div class="col-auto p-3 task-menu" (click)="toggleTaskMenu(task)"\r\n             data-bs-toggle="tooltip" data-bs-placement="top" title="More">\r\n          <img src="./assets/icons/more.svg" width="20" height="20" />\r\n        </div>\r\n        \x3c!-- Actions Menu --\x3e\r\n        <div class="col-auto" *ngIf="task.showMenu && !task.colorMenu">\r\n          <div class="row">\r\n            <div class="col p-3 px-4 task-menu"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Reminder"\r\n                 (click)="openReminderModal(task)">\r\n              <img src="./assets/icons/time.svg" width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu" (click)="togglePinTask(task)" *ngIf="!task.deleted"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Pin">\r\n              <img src="{{\'./assets/icons/\' + (task.pinned ? \'pin-warning\' : \'pin\') + \'.svg\'}}"\r\n                   width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu" (click)="showColorMenu(task)"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Color"\r\n                 *ngIf="!task.done && !task.deleted">\r\n              <img src="./assets/icons/color.svg" width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu" (click)="archiveTask(task)" *ngIf="!task.deleted"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Archive">\r\n              <img src="{{\'./assets/icons/\' + (task.archived ? \'archive-primary\' : \'archive\') + \'.svg\'}}"\r\n                   width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu" (click)="deleteTask(task)"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Trash">\r\n              <img src="./assets/icons/trash.svg" width="20" height="20" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \x3c!-- Color Menu --\x3e\r\n        <div class="col-auto bg-light" *ngIf="!task.showMenu && task.colorMenu">\r\n          <div class="row">\r\n            <div class="col p-3 px-4 task-menu" (click)="hideColorMenu(task)"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Color">\r\n              <img src="./assets/icons/color-dark.svg" width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu"\r\n                 (click)="changeColor(task, color)"\r\n                 *ngFor="let color of colorList">\r\n              <div class="color-circle" [ngClass]="color ? \'bg-\'+ color : \'\'"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\x3c!-- Filtered Error Msg --\x3e\r\n<div *ngIf="!filteredTaskList?.length && searchValue" class="py-3">\r\n  <div class="alert alert-primary alert-danger w-75 mx-auto">\r\n    There is no task with that name!!\r\n  </div>\r\n</div>\r\n\x3c!-- All Task Menu --\x3e\r\n<div *ngIf="!filteredTaskList?.length && !searchValue">\r\n  <div class="row mx-auto justify-content-between rounded w-75 border mb-2"\r\n       [class.pinned]="task.pinned"\r\n       [ngClass]="task.taskColor && !task.done && !task.deleted ? \'alert-\'+ task.taskColor + \' border-\'+ task.taskColor : \'\'"\r\n       [class.alert-success]="task.done"\r\n       [class.border-success]="task.done"\r\n       [class.alert-danger]="task.deleted"\r\n       [class.border-danger]="task.deleted"\r\n       *ngFor="let task of taskList">\r\n    \x3c!-- Left Menu Side --\x3e\r\n    <div class="col-auto p-3">\r\n      <div class="d-flex align-items-center">\r\n        <div class="border rounded" style="height:24px;width:24px;"\r\n             [ngClass]="(task.taskColor && !task.done && !task.deleted) ? \'border-\'+ task.taskColor : \'\'"\r\n             [class.bg-success]="task.done"\r\n             [class.bg-danger]="task.deleted"\r\n             (click)="taskCompleted(task)"></div>\r\n        <div class="ms-3"\r\n             [class.text-decoration-line-through]="task.done || task.deleted"\r\n             [class.text-success]="task.done"\r\n             [class.text-danger]="task.deleted">\r\n          {{task.taskName}}\r\n        </div>\r\n        <div class="d-flex" *ngIf="!task.colorMenu">\r\n          <div class="ms-3 border rounded-pill py-1-5 px-2 fs-8" *ngIf="task.category"\r\n               [ngClass]="task.deleted ?\'alert-danger border-danger\' : \'alert-primary border-primary\'">\r\n            {{task.category}}\r\n          </div>\r\n          <div class="ms-3 border rounded-pill py-1-5 px-2 fs-8"\r\n               *ngIf="task.reminder && !task.done"\r\n               [ngClass]="task.deleted ?\'alert-danger border-danger\' : \'alert-primary border-primary\'">\r\n            <img src="./assets/icons/time.svg" width="14" height="14" />\r\n            <span class="ms-2">{{ task.dateStatus? task.dateStatus :  task.reminder | date:\'dd MMM\' }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \x3c!-- Right Menu Side --\x3e\r\n    <div class="col-auto d-flex">\r\n      \x3c!-- Boolean Results --\x3e\r\n      <div class="col-auto row me-2 align-items-center"\r\n           *ngIf="(task.done || task.pinned || task.archived || task.deleted) && !task.showMenu && !task.colorMenu">\r\n        <div class="col me-1" *ngIf="task.done">\r\n          <img src="./assets/icons/pocket-success.svg" width="20" height="20" />\r\n        </div>\r\n        <div class="col me-1" *ngIf="task.pinned">\r\n          <img src="./assets/icons/pin-warning.svg" width="20" height="20" />\r\n        </div>\r\n        <div class="col me-1" *ngIf="task.archived">\r\n          <img src="./assets/icons/archive-primary.svg" width="20" height="20" />\r\n        </div>\r\n        <div class="col me-1" *ngIf="task.deleted">\r\n          <img src="./assets/icons/trash-danger.svg" width="20" height="20" />\r\n        </div>\r\n      </div>\r\n      \x3c!-- More Actions --\x3e\r\n      <div class="bg-dark col-auto row">\r\n        <div class="col-auto p-3 task-menu" (click)="toggleTaskMenu(task)"\r\n             data-bs-toggle="tooltip" data-bs-placement="top" title="More">\r\n          <img src="./assets/icons/more.svg" width="20" height="20" />\r\n        </div>\r\n        \x3c!-- Actions Menu --\x3e\r\n        <div class="col-auto" *ngIf="task.showMenu && !task.colorMenu">\r\n          <div class="row">\r\n            <div class="col p-3 px-4 task-menu"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Reminder" (click)="openReminderModal(task)">\r\n              <img src="./assets/icons/time.svg" width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu" (click)="togglePinTask(task)" *ngIf="!task.deleted"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Pin">\r\n              <img src="{{\'./assets/icons/\' + (task.pinned ? \'pin-warning\' : \'pin\') + \'.svg\'}}"\r\n                   width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu" (click)="showColorMenu(task)"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Color"\r\n                 *ngIf="!task.done && !task.deleted">\r\n              <img src="./assets/icons/color.svg" width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu" (click)="archiveTask(task)" *ngIf="!task.deleted"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Archive">\r\n              <img src="{{\'./assets/icons/\' + (task.archived ? \'archive-primary\' : \'archive\') + \'.svg\'}}"\r\n                   width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu" (click)="deleteTask(task)"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Trash">\r\n              <img src="./assets/icons/trash.svg" width="20" height="20" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \x3c!-- Color Menu --\x3e\r\n        <div class="col-auto bg-light" *ngIf="!task.showMenu && task.colorMenu">\r\n          <div class="row">\r\n            <div class="col p-3 px-4 task-menu" (click)="hideColorMenu(task)"\r\n                 data-bs-toggle="tooltip" data-bs-placement="top" title="Color">\r\n              <img src="./assets/icons/color-dark.svg" width="20" height="20" />\r\n            </div>\r\n            <div class="col p-3 px-4 task-menu"\r\n                 (click)="changeColor(task, color)"\r\n                 *ngFor="let color of colorList">\r\n              <div class="color-circle" [ngClass]="color ? \'bg-\'+ color : \'\'"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\x3c!-- Create/Edit Task Modal --\x3e\r\n<div class="modal fade" id="taskModal" tabindex="-1" aria-hidden="true">\r\n  <div class="modal-dialog modal-dialog-centered">\r\n    <div class="modal-content">\r\n      <app-edit-task (addTask)="createTask($event)"\r\n                     (editTask)="editTask($event)"\r\n                     [taskList]="taskList"\r\n                     [selectedTask]="selectedTask">\r\n      </app-edit-task>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\x3c!-- Edit Reminder Task Modal --\x3e\r\n<div class="modal fade" id="reminderModal" tabindex="-1" aria-hidden="true">\r\n  <div class="modal-dialog modal-dialog-centered">\r\n    <div class="modal-content">\r\n      <app-edit-reminder [selectedTask]="selectedTask"\r\n                         (edit)="editReminder($event)">\r\n      </app-edit-reminder>\r\n    </div>\r\n  </div>\r\n</div>\r\n',styles:[h]})],n);var p=t(3568),e=t(335);var b=t(4269);let i=class{constructor(s){this.fb=s,this.addTask=new a.vpe,this.editTask=new a.vpe}ngOnInit(){this.taskForm=this.fb.group({taskName:["",[e.kI.required,e.kI.minLength(3),e.kI.pattern("^[\u0623-\u064aa-zA-Z].*"),e.kI.maxLength(50)]],category:["",[e.kI.minLength(3),e.kI.pattern("^[\u0623-\u064aa-zA-Z].*"),e.kI.maxLength(50)]],reminder:[""]})}ngOnChanges(s){this.selectedTask=s.selectedTask.currentValue,this.selectedTask&&this.taskForm.patchValue({taskName:this.selectedTask.taskName,category:this.selectedTask.category,reminder:this.selectedTask.reminder})}submitTask(){if(this.taskForm.dirty&&this.taskForm.valid){if(this.selectedTask)this.task={id:this.selectedTask.id,taskName:this.taskForm.value.taskName,category:this.taskForm.value.category,reminder:this.taskForm.value.reminder,pinned:this.selectedTask.pinned,archived:this.selectedTask.archived,deleted:this.selectedTask.deleted,done:this.selectedTask.done,showMenu:this.selectedTask.showMenu},this.editTask.emit(this.task);else{let s=parseInt((1e7*Math.random()).toFixed());this.task={id:s,taskName:this.taskForm.value.taskName,category:this.taskForm.value.category,reminder:this.taskForm.value.reminder,pinned:!1,archived:!1,deleted:!1,done:!1,showMenu:!1},this.addTask.emit(this.task)}this.taskForm.reset()}else this.taskForm.markAsTouched(),this.taskForm.markAsDirty()}get taskName(){return this.taskForm.get("taskName")}get category(){return this.taskForm.get("category")}};i.ctorParameters=()=>[{type:e.qu}],i.propDecorators={taskList:[{type:a.IIB}],selectedTask:[{type:a.IIB}],addTask:[{type:a.r_U}],editTask:[{type:a.r_U}]},i=(0,o.gn)([(0,a.wA2)({selector:"app-edit-task",template:'<form [formGroup]="taskForm" (submit)="submitTask()" novalidate>\r\n  <div class="modal-header">\r\n    <h5 class="modal-title" id="staticBackdropLabel">{{ selectedTask ? \'Edit\' : \'Create\'}} Task</h5>\r\n    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\r\n  </div>\r\n  <div class="modal-body">\r\n    <div class="row">\r\n      <div class="col-12 mb-3">\r\n        <label for="taskName" class="mb-1">Task Name <span class="text-danger">*</span></label>\r\n        <input type="text" id="taskName" class="form-control"\r\n               placeholder="Task Name" formControlName="taskName"\r\n               [ngClass]="taskName?.invalid && (taskName?.dirty || taskName?.touched) ? \'border-danger\':\'\'">\r\n        <div *ngIf="taskName?.invalid && (taskName?.dirty || taskName?.touched)" class="text-danger">\r\n          <div *ngIf="taskName.errors && taskName.errors.required">\r\n            Task Name is required.\r\n          </div>\r\n          <div *ngIf="taskName.errors && taskName.errors.minlength">\r\n            Task Name must be at least 3 characters.\r\n          </div>\r\n          <div *ngIf="taskName.errors && taskName.errors.maxLength">\r\n            Task Name must be 50 characters maximum.\r\n          </div>\r\n          <div *ngIf="taskName.errors && taskName.errors.pattern">\r\n            Task Name must start with a character.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class="col-12 mb-3">\r\n        <label for="category" class="mb-1">Category <span class="text-danger">*</span></label>\r\n        <input type="text" id="category" class="form-control"\r\n               placeholder="Category" formControlName="category"\r\n               [ngClass]="category?.invalid && (category?.dirty || category?.touched) ? \'border-danger\':\'\'">\r\n        <div *ngIf="category?.invalid && (category?.dirty || category?.touched)" class="text-danger">\r\n          <div *ngIf="category.errors && category.errors.minlength">\r\n            Category must be at least 3 characters.\r\n          </div>\r\n          <div *ngIf="category.errors && category.errors.maxLength">\r\n            Category must be 50 characters maximum.\r\n          </div>\r\n          <div *ngIf="category.errors && category.errors.maxLength">\r\n            Category must be 50 characters maximum.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class="col-12 mb-3">\r\n        <label for="reminder" class="mb-1">Reminder (Optional)</label>\r\n        <input type="date" id="reminder" class="form-control"\r\n               placeholder="mm/dd/yyyy" formControlName="reminder">\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="modal-footer">\r\n    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>\r\n    <button type="submit" class="btn btn-success">Submit</button>\r\n  </div>\r\n</form>\r\n',styles:[b]})],i);var f=t(385);const y=[{path:"tasks",component:n}];let l=class{};l=(0,o.gn)([(0,a.LVF)({declarations:[n,i],imports:[g.ez,p.Bz.forChild(y),e.UX,e.u5,f.m]})],l)},4269:d=>{d.exports=""},4436:d=>{d.exports=".create-task {\n  opacity: 0.5;\n  border: 1px dashed gray;\n}\n.create-task:hover {\n  opacity: 1;\n}\n.task-menu {\n  cursor: pointer;\n}\n.task-menu:hover {\n  background-color: #457AFB33;\n}\n.pinned {\n  border-left-width: 15px !important;\n  border-left-color: orange !important;\n}\n.color-menu {\n  cursor: pointer;\n}\n.color-menu:hover {\n  background-color: #457AFB33;\n}\n.color-circle {\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  border: 0.5px solid #0d6efd;\n}"}}]);
//# sourceMappingURL=src_app_components_dashboard_components_tasks_tasks_module_ts.ab62c994e2bbb5ba50ca.js.map