{"version":3,"mappings":"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","names":["s","constructor","getTaskList","n","r","e","parseInt","i","Date","format","localStorage","getItem","JSON","parse","d","length","reminder","dateStatus","updateTask","removeItem","setItem","stringify","toggleTaskMenu","id","showMenu","showColorMenu","colorMenu","hideColorMenu","changeColor","taskColor","this","taskCompleted","done","togglePinTask","pinned","archiveTask","archived","deleteTask","deleted","search","filter","taskName","toLowerCase","indexOf","editReminder","t","m","l","providedIn","a","ngOnInit","ngOnChanges","selectedTask","currentValue","taskReminder","edit","emit","selector","template","declarations","imports","f","exports"],"sources":["./src/app/components/dashboard/components/task.service.ts","./src/app/components/dashboard/shared/edit-reminder/edit-reminder.component.ts","./src/app/components/dashboard/shared/edit-reminder/edit-reminder.component.html","./src/app/components/dashboard/shared/shared.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Task } from './tasks';\r\nimport moment from 'moment';\r\n\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\n\r\nexport class TaskService {\r\n\r\n  constructor() { }\r\n\r\n  getTaskList() {\r\n    let taskList: Task[] = [];\r\n    let today: number = parseInt(moment(new Date()).format(\"yyyyMMDD\"));\r\n    let reminderDateNumber: number;\r\n    if (localStorage.getItem('taskList')) {\r\n      taskList = JSON.parse(localStorage.getItem('taskList') as string);\r\n      for (let i = 0; i < taskList.length; i++) {\r\n        if (taskList[i].reminder) {\r\n          reminderDateNumber = parseInt(moment(taskList[i].reminder, \"yyyy-MM-DD\").format(\"yyyyMMDD\"));\r\n          if (reminderDateNumber === today) {\r\n            taskList[i].dateStatus = 'today';\r\n          } else {\r\n            taskList[i].dateStatus = '';\r\n          }\r\n        }\r\n      }\r\n      return taskList as Task[];\r\n    } else {\r\n      return taskList;\r\n    }\r\n  }\r\n\r\n  updateTask(taskList: Task[]) {\r\n    localStorage.removeItem('taskList');\r\n    localStorage.setItem('taskList', JSON.stringify(taskList));\r\n  }\r\n\r\n  toggleTaskMenu(task: Task, taskList: Task[]) {\r\n    for (let i = 0; i < taskList.length; i++) {\r\n      if (taskList[i].id === task.id) {\r\n        taskList[i].showMenu = !task.showMenu;\r\n      }\r\n    }\r\n  }\r\n\r\n  showColorMenu(task: Task, taskList: Task[]) {\r\n    for (let i = 0; i < taskList.length; i++) {\r\n      if (taskList[i].id === task.id) {\r\n        taskList[i].showMenu = false;\r\n        taskList[i].colorMenu = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  hideColorMenu(task: Task, taskList: Task[]) {\r\n    for (let i = 0; i < taskList.length; i++) {\r\n      if (taskList[i].id === task.id) {\r\n        taskList[i].showMenu = false;\r\n        taskList[i].colorMenu = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  changeColor(task: Task, taskList: Task[], color: string) {\r\n    for (let i = 0; i < taskList.length; i++) {\r\n      if (taskList[i].id === task.id) {\r\n        taskList[i].taskColor = color;\r\n        taskList[i].showMenu = false;\r\n        taskList[i].colorMenu = false;\r\n      }\r\n    }\r\n    this.updateTask(taskList);\r\n  }\r\n\r\n  taskCompleted(task: Task, taskList: Task[]) {\r\n    for (let i = 0; i < taskList.length; i++) {\r\n      if (taskList[i].id === task.id) {\r\n        taskList[i].done = !taskList[i].done;\r\n        taskList[i].showMenu = false;\r\n      }\r\n    }\r\n    this.updateTask(taskList);\r\n  }\r\n\r\n  togglePinTask(task: Task, taskList: Task[]) {\r\n    for (let i = 0; i < taskList.length; i++) {\r\n      if (taskList[i].id === task.id) {\r\n        taskList[i].pinned = !taskList[i].pinned;\r\n        taskList[i].showMenu = false;\r\n      }\r\n    }\r\n    this.updateTask(taskList);\r\n  }\r\n\r\n  archiveTask(task: Task, taskList: Task[]) {\r\n    for (let i = 0; i < taskList.length; i++) {\r\n      if (taskList[i].id === task.id) {\r\n        taskList[i].archived = !taskList[i].archived;\r\n        taskList[i].showMenu = false;\r\n      }\r\n    }\r\n    this.updateTask(taskList);\r\n  }\r\n\r\n  deleteTask(task: Task, taskList: Task[]) {\r\n    for (let i = 0; i < taskList.length; i++) {\r\n      if (taskList[i].id === task.id) {\r\n        taskList[i].deleted = !taskList[i].deleted;\r\n        taskList[i].pinned = false;\r\n        taskList[i].archived = false;\r\n        taskList[i].done = false;\r\n        taskList[i].showMenu = false;\r\n      }\r\n    }\r\n    this.updateTask(taskList);\r\n  }\r\n\r\n  search(searchValue: string, taskList: Task[]) {\r\n    return taskList.filter((task: Task) => {\r\n      return (task.taskName.toLowerCase().indexOf(searchValue.toLowerCase() as string) > -1);\r\n    })\r\n  }\r\n\r\n  editReminder(task: Task, taskList: Task[]) {\r\n    let reminderDateNumber: number;\r\n    let today: number = parseInt(moment(new Date()).format(\"yyyyMMDD\"));\r\n    for (let i = 0; i < taskList.length; i++) {\r\n      if (taskList[i].id === task.id) {\r\n        taskList[i].reminder = task.reminder;\r\n        taskList[i].showMenu = !task.showMenu;\r\n        if (taskList[i].reminder) {\r\n          reminderDateNumber = parseInt(moment(taskList[i].reminder, \"yyyy-MM-DD\").format(\"yyyyMMDD\"));\r\n          if (reminderDateNumber === today) {\r\n            taskList[i].dateStatus = 'today';\r\n          } else {\r\n            taskList[i].dateStatus = '';\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.updateTask(taskList);\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { Task } from '../../components/tasks';\r\n\r\n@Component({\r\n  selector: 'app-edit-reminder',\r\n  templateUrl: './edit-reminder.component.html',\r\n  styleUrls: ['./edit-reminder.component.scss']\r\n})\r\nexport class EditReminderComponent implements OnInit, OnChanges {\r\n  @Input() selectedTask!: Task;\r\n  @Output() edit = new EventEmitter<Task>();\r\n  public taskReminder!: Date;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.selectedTask.currentValue) {\r\n      this.selectedTask = changes.selectedTask.currentValue as Task;\r\n      if (this.selectedTask) {\r\n        this.taskReminder = this.selectedTask.reminder as Date;\r\n      }\r\n    }\r\n  }\r\n\r\n  editReminder(taskReminder: Date) {\r\n    this.selectedTask.reminder = taskReminder;\r\n    this.edit.emit(this.selectedTask);\r\n  }\r\n}\r\n","export default \"<div class=\\\"modal-header\\\">\\r\\n  <h5 class=\\\"modal-title\\\" id=\\\"staticBackdropLabel\\\">Edit Task Reminder</h5>\\r\\n  <button type=\\\"button\\\" class=\\\"btn-close\\\" data-bs-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"></button>\\r\\n</div>\\r\\n<div class=\\\"modal-body\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 mb-3\\\">\\r\\n      <label for=\\\"reminder\\\" class=\\\"mb-1\\\">Reminder</label>\\r\\n      <input type=\\\"date\\\" id=\\\"reminder\\\" class=\\\"form-control\\\"\\r\\n              placeholder=\\\"mm/dd/yyyy\\\" [(ngModel)]=\\\"taskReminder\\\">\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<div class=\\\"modal-footer\\\">\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-bs-dismiss=\\\"modal\\\">Close</button>\\r\\n  <button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"editReminder(taskReminder)\\\">Edit</button>\\r\\n</div>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EditReminderComponent } from '../shared/edit-reminder/edit-reminder.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    EditReminderComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  exports: [\r\n    EditReminderComponent\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n"],"sourceRoot":"webpack:///","file":"common.a3e5f3cbe8360344cfe2.js"}