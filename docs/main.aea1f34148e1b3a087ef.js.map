{"version":3,"mappings":"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","names":["n","t","o","constructor","this","JSON","parse","localStorage","getItem","isAuthenticated","Promise","m","c","loggedIn","login","removeItem","setItem","logout","alert","i","e","g","ngOnInit","currentUser","menuShrink","shrink","username","password","profilePic","fullName","email","authService","router","navigate","s","selector","template","path","loadChildren","then","PrayerModule","pathMatch","HomeDashboardModule","TasksModule","r","CategoriesModule","ProfileModule","d","imports","u","declarations","l","a","p","x","userList","loginForm","fb","group","reset","loginError","dirty","valid","length","value","stringify","markAsTouched","invalid","get","showPassword","$","attr","component","v","userForm","valueChanges","subscribe","userExists","register","user","toLowerCase","push","y","L","canActivate","C","k","h","RegisterModule","LoginModule","DashboardModule","M","exports","w","I","b","providers","bootstrap","bootstrapModule","catch","console","error"],"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/auth.service.ts","./src/app/components/dashboard/containers/dashboard.component.ts","./src/app/components/dashboard/containers/dashboard.component.html","./src/app/components/dashboard/containers/dashboard-routing.module.ts","./src/app/components/dashboard/containers/dashboard.module.ts","./src/app/components/public/login/login.component.ts","./src/app/components/public/login/login.component.html","./src/app/components/public/login/login.module.ts","./src/app/components/public/register/register.component.ts","./src/app/components/public/register/register.component.html","./src/app/components/public/register/register.module.ts","./src/app/auth-guard.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { User } from \"./components/public/public\";\r\n\r\nexport class AuthService {\r\n  public loggedIn: boolean = false;\r\n  public currentUser: User = JSON.parse(localStorage.getItem('currentUser') as string);\r\n  public userList: User[] = JSON.parse(localStorage.getItem('userList') as string);\r\n\r\n  isAuthenticated() {\r\n    const promise = new Promise(\r\n      (reslove, reject) => {\r\n        reslove(this.loggedIn);\r\n      }\r\n    );\r\n    return promise;\r\n  }\r\n\r\n  login() {\r\n    localStorage.removeItem('loggedIn');\r\n    this.loggedIn = true;\r\n    localStorage.setItem('loggedIn', 'true');\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('loggedIn');\r\n    localStorage.removeItem('currentUser');\r\n    this.loggedIn = false;\r\n    localStorage.setItem('loggedIn', 'false');\r\n    alert('You are logged out');\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../../auth.service';\r\nimport { User } from '../../public/public';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  public shrink: boolean = false;\r\n  public currentUser!: User;\r\n\r\n  constructor(private authService: AuthService,\r\n    private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.currentUser = JSON.parse(localStorage.getItem('currentUser') as string);\r\n  }\r\n\r\n  menuShrink() {\r\n    this.shrink = !this.shrink;\r\n  }\r\n\r\n  logout() {\r\n    this.currentUser = {\r\n      username: '',\r\n      password: '',\r\n      profilePic: '',\r\n      fullName: '',\r\n      email: ''\r\n    };\r\n    this.authService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n","export default \"<div class=\\\"row mx-0\\\">\\r\\n  <div [ngStyle]=\\\"{'width.px': (!shrink? 280 : 50)}\\\" class=\\\"mx-0 px-0 h-100vh fixed-top\\\">\\r\\n    <div class=\\\"d-flex flex-column flex-shrink-0 text-white bg-dark h-100\\\">\\r\\n      <div class=\\\"p-3 bg-light\\\">\\r\\n        <div class=\\\"d-flex justify-content-between\\\">\\r\\n          <div [ngClass]=\\\"{'d-none': shrink}\\\">\\r\\n            <img src=\\\"./assets/logo.png\\\" width=\\\"18\\\" height=\\\"18\\\" />\\r\\n            <span class=\\\"ps-1 text-dark\\\">Reminders</span>\\r\\n          </div>\\r\\n          <div class=\\\"btn p-0\\\" (click)=\\\"menuShrink()\\\">\\r\\n            <img src=\\\"./assets/icons/setting.svg\\\" width=\\\"18\\\" height=\\\"18\\\" />\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <ul class=\\\"nav nav-pills flex-column mb-auto\\\">\\r\\n        <li class=\\\"nav-item\\\">\\r\\n          <a class=\\\"nav-link py-3 text-white\\\" routerLink=\\\"prayer\\\" routerLinkActive=\\\"active\\\">\\r\\n            <img src=\\\"./assets/icons/prayer.svg\\\" width=\\\"16\\\" height=\\\"16\\\" />\\r\\n            <span class=\\\"ms-2\\\" [ngClass]=\\\"{'d-none': shrink}\\\">Prayer</span>\\r\\n          </a>\\r\\n        </li>\\r\\n        <li>\\r\\n          <a routerLink=\\\"home-dashboard\\\" routerLinkActive=\\\"active\\\" class=\\\"nav-link py-3 text-white\\\">\\r\\n            <img src=\\\"./assets/icons/dashboard.svg\\\" width=\\\"16\\\" height=\\\"16\\\" />\\r\\n            <span class=\\\"ms-2\\\" [ngClass]=\\\"{'d-none': shrink}\\\">Dashboard</span>\\r\\n          </a>\\r\\n        </li>\\r\\n        <li>\\r\\n          <a class=\\\"nav-link py-3 text-white\\\" routerLink=\\\"tasks\\\" routerLinkActive=\\\"active\\\">\\r\\n            <img src=\\\"./assets/icons/tasks.svg\\\" width=\\\"16\\\" height=\\\"16\\\" />\\r\\n            <span class=\\\"ms-2\\\" [ngClass]=\\\"{'d-none': shrink}\\\">Tasks</span>\\r\\n          </a>\\r\\n        </li>\\r\\n        <li>\\r\\n          <a routerLink=\\\"reminders\\\" routerLinkActive=\\\"active\\\" class=\\\"nav-link py-3 text-white\\\">\\r\\n            <img src=\\\"./assets/icons/time.svg\\\" width=\\\"16\\\" height=\\\"16\\\" />\\r\\n            <span class=\\\"ms-2\\\" [ngClass]=\\\"{'d-none': shrink}\\\">Reminders</span>\\r\\n          </a>\\r\\n        </li>\\r\\n        <li>\\r\\n          <a routerLink=\\\"my-pocket\\\" routerLinkActive=\\\"active\\\" class=\\\"nav-link py-3 text-white\\\">\\r\\n            <img src=\\\"./assets/icons/pocket.svg\\\" width=\\\"16\\\" height=\\\"16\\\" />\\r\\n            <span class=\\\"ms-2\\\" [ngClass]=\\\"{'d-none': shrink}\\\">My Pocket</span>\\r\\n          </a>\\r\\n        </li>\\r\\n        <li>\\r\\n          <a routerLink=\\\"categories\\\" routerLinkActive=\\\"active\\\" class=\\\"nav-link py-3 text-white\\\">\\r\\n            <img src=\\\"./assets/icons/categories.svg\\\" width=\\\"16\\\" height=\\\"16\\\" />\\r\\n            <span class=\\\"ms-2\\\" [ngClass]=\\\"{'d-none': shrink}\\\">Categories</span>\\r\\n          </a>\\r\\n        </li>\\r\\n        <li>\\r\\n          <a routerLink=\\\"archive\\\" routerLinkActive=\\\"active\\\" class=\\\"nav-link py-3 text-white\\\">\\r\\n            <img src=\\\"./assets/icons/archive.svg\\\" width=\\\"16\\\" height=\\\"16\\\" />\\r\\n            <span class=\\\"ms-2\\\" [ngClass]=\\\"{'d-none': shrink}\\\">Archive</span>\\r\\n          </a>\\r\\n        </li>\\r\\n        <li>\\r\\n          <a routerLink=\\\"trash\\\" routerLinkActive=\\\"active\\\" class=\\\"nav-link py-3 text-white\\\">\\r\\n            <img src=\\\"./assets/icons/trash.svg\\\" width=\\\"16\\\" height=\\\"16\\\" />\\r\\n            <span class=\\\"ms-2\\\" [ngClass]=\\\"{'d-none': shrink}\\\">Trash</span>\\r\\n          </a>\\r\\n        </li>\\r\\n      </ul>\\r\\n      <div class=\\\"mx-auto py-3 clickable\\\" (click)=\\\"logout()\\\" *ngIf=\\\"shrink\\\">\\r\\n        <img src=\\\"./assets/icons/logout.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n      </div>\\r\\n      <div>\\r\\n        <a routerLink=\\\"profile\\\" [ngClass]=\\\"shrink ? 'px-2': 'px-3'\\\" routerLinkActive=\\\"bg-primary\\\"\\r\\n           class=\\\"text-white text-decoration-none py-3 profile-href d-inline-block w-100\\\">\\r\\n          <div class=\\\"row justify-content-between align-items-center\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <span class=\\\"d-inline-block\\\">\\r\\n                <img style=\\\"height:34px;width:34px;\\\" height=\\\"34\\\" width=\\\"34\\\" class=\\\"img-fluid rounded-circle border\\\"\\r\\n                     src=\\\"{{currentUser.profilePic ? currentUser.profilePic : './assets/icons/profile.svg'}}\\\"/>\\r\\n              </span>\\r\\n              <span class=\\\"ms-2 username-overflow\\\" [ngClass]=\\\"{'d-none': shrink}\\\">\\r\\n                {{ currentUser.username | titlecase }}\\r\\n              </span>\\r\\n            </div>\\r\\n            <div class=\\\"col-auto\\\" (click)=\\\"logout()\\\" *ngIf=\\\"!shrink\\\">\\r\\n              <img src=\\\"./assets/icons/logout.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n            </div>\\r\\n          </div>\\r\\n        </a>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div [ngStyle]=\\\"{'width.px': (!shrink? '280' : '50')}\\\" class=\\\"col-auto px-0\\\">\\r\\n  </div>\\r\\n  <div class=\\\"col px-0\\\" [ngStyle]=\\\"{'width': (!shrink? 'calc(100% - 280px)' : 'calc(100% - 50px)')}\\\">\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <router-outlet></router-outlet>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst dashboardRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../components/prayer/prayer.module').then(m => m.PrayerModule),\r\n    pathMatch: 'prefix'\r\n  },\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../components/home-dashboard/home-dashboard.module').then(m => m.HomeDashboardModule)\r\n  },\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../components/tasks/tasks.module').then(m => m.TasksModule)\r\n  },\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../components/categories/categories.module').then(m => m.CategoriesModule)\r\n  },\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../components/profile/profile.module').then(m => m.ProfileModule)\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(dashboardRoutes)],\r\n})\r\nexport class DashboardRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DashboardComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    DashboardRoutingModule,\r\n    RouterModule,\r\n  ],\r\n})\r\nexport class DashboardModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../../auth.service';\r\nimport { User } from '../public';\r\ndeclare let $: any;\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public loginForm!: FormGroup;\r\n  public userList: User[] = [];\r\n  public loginError: boolean = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.authService.userList) {\r\n      this.userList = this.authService.userList;\r\n    }\r\n    this.loginForm = this.fb.group({\r\n      username: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(3),\r\n          Validators.pattern(\"(^[a-zA-Z].*)([^' ']+$)\"),\r\n          Validators.maxLength(50)\r\n        ]\r\n      ],\r\n      password: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(5),\r\n          Validators.maxLength(50)\r\n        ]\r\n      ],\r\n    });\r\n    this.loginForm.reset();\r\n  }\r\n\r\n  login() {\r\n    this.loginError = false;\r\n    if (this.loginForm.dirty && this.loginForm.valid) {\r\n      if (this.userList.length) {\r\n        for (let i = 0; i < this.userList.length; i++) {\r\n          if ((this.userList[i].username === this.loginForm.value.username) &&\r\n            (this.userList[i].password === this.loginForm.value.password)) {\r\n            alert(`Welcome ${this.userList[i].username}, You are logged in`);\r\n            localStorage.setItem('currentUser', JSON.stringify(this.userList[i]));\r\n            this.authService.login();\r\n            this.router.navigate(['/dashboard/prayer']);\r\n          }\r\n        }\r\n      } else {\r\n        this.loginError = true;\r\n        alert(`username or password are not correct, Please try again`);\r\n      }\r\n    } else {\r\n      this.loginForm.markAsTouched;\r\n      this.loginForm.invalid;\r\n    }\r\n  }\r\n\r\n  get username() {\r\n    return this.loginForm.get('username');\r\n  }\r\n\r\n  get password() {\r\n    return this.loginForm.get('password');\r\n  }\r\n\r\n  showPassword() {\r\n    $('#password').attr('type', 'text');\r\n  }\r\n}\r\n","export default \"<div class=\\\"container pt-5\\\">\\r\\n  <form [formGroup]=\\\"loginForm\\\" (submit)=\\\"login()\\\" novalidate class=\\\"pt-5 mt-5\\\">\\r\\n    <div class=\\\"row mt-5 justify-content-center\\\">\\r\\n      <h3 class=\\\"text-center mb-5\\\">\\r\\n        <img src=\\\"./assets/logo.png\\\" width=\\\"36\\\" height=\\\"36\\\" />\\r\\n        Reminders\\r\\n      </h3>\\r\\n      <div class=\\\"col-lg-6 col-md-8 col-sm-12\\\">\\r\\n        <div class=\\\"alert alert-danger fs-7\\\" *ngIf=\\\"loginError\\\">\\r\\n          Username or password are not correct, Please try again!!\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-12 mb-3\\\">\\r\\n            <div class=\\\"row mx-0 align-items-center bg-reminder input-reminder-group\\\"\\r\\n                 [ngClass]=\\\"username?.invalid && (username?.dirty || username?.touched) ? 'border border-danger':''\\\">\\r\\n              <div class=\\\"col-auto px-3\\\">\\r\\n                <img src=\\\"./assets/icons/user.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n              </div>\\r\\n              <div class=\\\"col px-0\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"username\\\" class=\\\"w-100 ps-2 form-reminder-control\\\"\\r\\n                       placeholder=\\\"Username\\\" formControlName=\\\"username\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"username?.invalid && (username?.dirty || username?.touched)\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"username.errors && username.errors.required\\\">\\r\\n                Username is required.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"username.errors && username.errors.minlength\\\">\\r\\n                Username must be at least 3 characters.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"username.errors && username.errors.maxLength\\\">\\r\\n                Username must be 50 characters maximum.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"username.errors && username.errors.pattern\\\">\\r\\n                Username must start with a letter and remove all spaces.\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"col-12 mb-3\\\">\\r\\n            <div class=\\\"row mx-0 align-items-center bg-reminder input-reminder-group\\\"\\r\\n                 [ngClass]=\\\"password?.invalid && (password?.dirty || password?.touched) ? 'border border-danger':''\\\">\\r\\n              <div class=\\\"col-auto px-3\\\">\\r\\n                <img src=\\\"./assets/icons/password.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n              </div>\\r\\n              <div class=\\\"col px-0\\\">\\r\\n                <input class=\\\"w-100 ps-2 form-reminder-control\\\" type=\\\"password\\\" id=\\\"password\\\"\\r\\n                       placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\r\\n              </div>\\r\\n              <div class=\\\"col-auto px-3 clickable\\\" (click)=\\\"showPassword()\\\">\\r\\n                <img src=\\\"./assets/icons/show.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n              </div>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"password?.invalid && (password?.dirty || password?.touched)\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"password.errors && password.errors.required\\\">\\r\\n                Password is required.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"password.errors && password.errors.minlength\\\">\\r\\n                Password must be at least 5 characters.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"password.errors && password.errors.maxLength\\\">\\r\\n                Password must be 50 characters maximum.\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"mx-0 row justify-content-end ms-auto col-6\\\">\\r\\n          <button type=\\\"submit\\\" class=\\\"btn-reminder p-3\\\">\\r\\n            <img src=\\\"./assets/icons/login.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n            <span class=\\\"ps-2\\\">Login</span>\\r\\n          </button>\\r\\n          <a routerLink=\\\"/register\\\" class=\\\"text-end fs-7 text-decoration-none text-reminder mt-2\\\">\\r\\n            Create New Account\\r\\n          </a>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nconst loginRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(loginRoutes),\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n  ]\r\n})\r\nexport class LoginModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../../auth.service';\r\nimport { User } from '../public';\r\ndeclare let $: any;\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public userForm!: FormGroup;\r\n  public userList: User[] = [];\r\n  public user!: User;\r\n  public userExists: boolean = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder, private router: Router,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.authService.userList) {\r\n      this.userList = this.authService.userList;\r\n    }\r\n    this.userForm = this.fb.group({\r\n      username: [\r\n        '',\r\n        /*^[a-zA-Z].**/\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(3),\r\n          Validators.pattern(\"(^[a-zA-Z].*)([^' ']+$)\"),\r\n          Validators.maxLength(50)\r\n        ]\r\n      ],\r\n      password: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(5),\r\n          Validators.maxLength(50)\r\n        ]\r\n      ],\r\n    });\r\n    this.userForm.valueChanges.subscribe((value: any) => {\r\n      if (value.username && this.userList.length) {\r\n        for (let i = 0; i < this.userList.length; i++) {\r\n          if (this.userList[i].username === value.username) {\r\n            this.userExists = true;\r\n          } else {\r\n            this.userExists = false;\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  register() {\r\n    if (this.userForm.dirty && this.userForm.valid && this.userExists === false) {\r\n      this.user = {\r\n        username: this.userForm.value.username,\r\n        password: this.userForm.value.password,\r\n        email: this.userForm.value.username.toLowerCase() + '@mail.com',\r\n        profilePic: '',\r\n        fullName: '',\r\n      }\r\n      this.userList.push(this.user);\r\n      localStorage.setItem('userList', JSON.stringify(this.userList));\r\n      this.userForm.reset();\r\n      this.router.navigate(['/login']);\r\n    } else {\r\n      this.userForm.markAsTouched;\r\n      this.userForm.invalid;\r\n    }\r\n  }\r\n\r\n  get username() {\r\n    return this.userForm.get('username');\r\n  }\r\n\r\n  get password() {\r\n    return this.userForm.get('password');\r\n  }\r\n\r\n  showPassword() {\r\n    $('#password').attr('type', 'text');\r\n  }\r\n}\r\n","export default \"<div class=\\\"container pt-5\\\">\\r\\n  <form [formGroup]=\\\"userForm\\\" (submit)=\\\"register()\\\" novalidate class=\\\"pt-5 mt-5\\\">\\r\\n    <div class=\\\"row mt-5 justify-content-center\\\">\\r\\n      <h3 class=\\\"text-center mb-5\\\">\\r\\n        <img src=\\\"./assets/logo.png\\\" width=\\\"36\\\" height=\\\"36\\\"/>\\r\\n        Reminders\\r\\n      </h3>\\r\\n      <div class=\\\"col-lg-6 col-md-8 col-sm-12\\\">\\r\\n        <div class=\\\"alert alert-danger fs-7\\\" *ngIf=\\\"userExists\\\">\\r\\n          Username already taken by another user, Please try again!!\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-12 mb-3\\\">\\r\\n            <div class=\\\"row mx-0 align-items-center bg-reminder input-reminder-group\\\"\\r\\n                 [ngClass]=\\\"username?.invalid && (username?.dirty || username?.touched) ? 'border border-danger':''\\\">\\r\\n              <div class=\\\"col-auto px-3\\\">\\r\\n                <img src=\\\"./assets/icons/user.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n              </div>\\r\\n              <div class=\\\"col px-0\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"username\\\" class=\\\"w-100 ps-2 form-reminder-control\\\"\\r\\n                       placeholder=\\\"Username\\\" formControlName=\\\"username\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"username?.invalid && (username?.dirty || username?.touched)\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"username.errors && username.errors.required\\\">\\r\\n                Username is required.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"username.errors && username.errors.minlength\\\">\\r\\n                Username must be at least 3 characters.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"username.errors && username.errors.maxLength\\\">\\r\\n                Username must be 50 characters maximum.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"username.errors && username.errors.pattern\\\">\\r\\n                Username must start with a letter and remove all spaces.\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"col-12 mb-3\\\">\\r\\n            <div class=\\\"row mx-0 align-items-center bg-reminder input-reminder-group\\\"\\r\\n                 [ngClass]=\\\"password?.invalid && (password?.dirty || password?.touched) ? 'border border-danger':''\\\">\\r\\n              <div class=\\\"col-auto px-3\\\">\\r\\n                <img src=\\\"./assets/icons/password.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n              </div>\\r\\n              <div class=\\\"col px-0\\\">\\r\\n                <input class=\\\"w-100 ps-2 form-reminder-control\\\" type=\\\"password\\\" id=\\\"password\\\"\\r\\n                     placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\r\\n              </div>\\r\\n              <div class=\\\"col-auto px-3 clickable\\\" (click)=\\\"showPassword()\\\">\\r\\n                <img src=\\\"./assets/icons/show.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n              </div>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"password?.invalid && (password?.dirty || password?.touched)\\\" class=\\\"text-danger\\\">\\r\\n              <div *ngIf=\\\"password.errors && password.errors.required\\\">\\r\\n                Password is required.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"password.errors && password.errors.minlength\\\">\\r\\n                Password must be at least 5 characters.\\r\\n              </div>\\r\\n              <div *ngIf=\\\"password.errors && password.errors.maxLength\\\">\\r\\n                Password must be 50 characters maximum.\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"mx-0 row justify-content-end ms-auto col-6\\\">\\r\\n          <button type=\\\"submit\\\" class=\\\"btn-reminder p-3\\\">\\r\\n            <img src=\\\"./assets/icons/register.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n            <span class=\\\"ps-2\\\">Register</span>\\r\\n          </button>\\r\\n          <a routerLink=\\\"/login\\\" class=\\\"text-end fs-7 text-decoration-none text-reminder mt-2\\\">\\r\\n            Already Have An Account ?\\r\\n          </a>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</div>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RegisterComponent } from './register.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nconst registerRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegisterComponent,\r\n    pathMatch: 'prefix'\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RegisterComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(registerRoutes),\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n  ]\r\n})\r\nexport class RegisterModule { }\r\n","import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.authService.isAuthenticated()\r\n      .then((authenticated) => {\r\n        let loggedIn = JSON.parse(localStorage.getItem('loggedIn') as string);\r\n        if (authenticated || loggedIn) {\r\n          //this.router.navigate(['/dashboard/prayer']);\r\n          return true;\r\n        } else {\r\n          this.router.navigate(['/login']);\r\n          return false;\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from './auth-guard.service';\r\nimport { DashboardComponent } from './components/dashboard/containers/dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'register',\r\n    loadChildren: () => import('./components/public/register/register.module').then(m => m.RegisterModule),\r\n    pathMatch: 'prefix',\r\n  },\r\n  {\r\n    path: 'login',\r\n    loadChildren: () => import('./components/public/login/login.module').then(m => m.LoginModule),\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    loadChildren: () => import('./components/dashboard/containers/dashboard.module').then(m => m.DashboardModule),\r\n    component: DashboardComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'time-manager-app';\r\n}\r\n","export default \"<router-outlet></router-outlet>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginModule } from './components/public/login/login.module';\r\nimport { RegisterModule } from './components/public/register/register.module';\r\nimport { DashboardModule } from './components/dashboard/containers/dashboard.module';\r\nimport { AuthGuard } from './auth-guard.service';\r\nimport { AuthService } from './auth.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    RegisterModule,\r\n    LoginModule,\r\n    RouterModule,\r\n    DashboardModule,\r\n    HttpClientModule,\r\n  ],\r\n  providers: [AuthGuard, AuthService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///","file":"main.aea1f34148e1b3a087ef.js"}