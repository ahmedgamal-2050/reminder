"use strict";(self.webpackChunktime_manager_app=self.webpackChunktime_manager_app||[]).push([["src_app_components_dashboard_components_tasks_reminders_reminders_module_ts"],{1320:(h,o,r)=>{r.r(o),r.d(o,{RemindersModule:()=>l});var p=r(3786),f=r(4106),T=r(4364);var m=r(2965),y=r(2281),a=r.n(y),c=r(8902);let d=class{constructor(e){this.taskService=e,this.taskList=[],this.reminderTaskList=[],this.pinnedTaskList=[],this.todayTasks=[],this.pastTasks=[],this.futureTasks=[],this.today=parseInt(a()(new Date).format("yyyyMMDD")),this.filteredTaskList=[],this.searchValue="",this.filteredReminderTasks=[]}ngOnInit(){this.taskList=this.taskService.getTaskList(),this.getAllReminderTaskList()}getAllReminderTaskList(){var e,i;let s;this.filteredReminderTasks=this.taskList.filter(t=>t.reminder&&!1===t.done&&!1===t.archived&&!1===t.deleted),(null===(e=this.filteredReminderTasks)||void 0===e?void 0:e.length)&&(this.pinnedTaskList=this.filteredReminderTasks.filter(t=>!0===t.pinned),this.reminderTaskList=this.filteredReminderTasks.filter(t=>!1===t.pinned)),(null===(i=this.reminderTaskList)||void 0===i?void 0:i.length)&&(this.pastTasks=this.reminderTaskList.filter(t=>(s=parseInt(a()(t.reminder,"yyyy-MM-DD").format("yyyyMMDD")),s<this.today)),this.todayTasks=this.reminderTaskList.filter(t=>"today"===t.dateStatus),this.futureTasks=this.reminderTaskList.filter(t=>(s=parseInt(a()(t.reminder,"yyyy-MM-DD").format("yyyyMMDD")),s>this.today)))}taskCompleted(e){let i=parseInt(a()(e.reminder,"yyyy-MM-DD").format("yyyyMMDD"));if(e.pinned)for(let s=0;s<this.pinnedTaskList.length;s++)this.pinnedTaskList[s].id===e.id&&this.pinnedTaskList.splice(s,1);else if(i<this.today)for(let s=0;s<this.pastTasks.length;s++)this.pastTasks[s].id===e.id&&this.pastTasks.splice(s,1);else if(i===this.today)for(let s=0;s<this.todayTasks.length;s++)this.todayTasks[s].id===e.id&&this.todayTasks.splice(s,1);else if(i>this.today)for(let s=0;s<this.futureTasks.length;s++)this.futureTasks[s].id===e.id&&this.futureTasks.splice(s,1);for(let s=0;s<this.filteredTaskList.length;s++)this.filteredTaskList[s].id===e.id&&this.filteredTaskList.splice(s,1)}togglePinTask(e){let i=parseInt(a()(e.reminder,"yyyy-MM-DD").format("yyyyMMDD"));if(e.pinned){for(let s=0;s<this.pinnedTaskList.length;s++)this.pinnedTaskList[s].id===e.id&&this.pinnedTaskList.splice(s,1);i<this.today?this.pastTasks.push(e):i===this.today?this.todayTasks.push(e):i>this.today&&this.futureTasks.push(e)}else{if(i<this.today)for(let s=0;s<this.pastTasks.length;s++)this.pastTasks[s].id===e.id&&this.pastTasks.splice(s,1);else if(i===this.today)for(let s=0;s<this.todayTasks.length;s++)this.todayTasks[s].id===e.id&&this.todayTasks.splice(s,1);else if(i>this.today)for(let s=0;s<this.futureTasks.length;s++)this.futureTasks[s].id===e.id&&this.futureTasks.splice(s,1);this.pinnedTaskList.push(e)}}archiveTask(e){let i=parseInt(a()(e.reminder,"yyyy-MM-DD").format("yyyyMMDD"));if(e.pinned)for(let s=0;s<this.pinnedTaskList.length;s++)this.pinnedTaskList[s].id===e.id&&this.pinnedTaskList.splice(s,1);else if(i<this.today)for(let s=0;s<this.pastTasks.length;s++)this.pastTasks[s].id===e.id&&this.pastTasks.splice(s,1);else if(i===this.today)for(let s=0;s<this.todayTasks.length;s++)this.todayTasks[s].id===e.id&&this.todayTasks.splice(s,1);else if(i>this.today)for(let s=0;s<this.futureTasks.length;s++)this.futureTasks[s].id===e.id&&this.futureTasks.splice(s,1);for(let s=0;s<this.filteredTaskList.length;s++)this.filteredTaskList[s].id===e.id&&this.filteredTaskList.splice(s,1)}deleteTask(e){let i=parseInt(a()(e.reminder,"yyyy-MM-DD").format("yyyyMMDD"));if(e.pinned)for(let s=0;s<this.pinnedTaskList.length;s++)this.pinnedTaskList[s].id===e.id&&this.pinnedTaskList.splice(s,1);else if(i<this.today)for(let s=0;s<this.pastTasks.length;s++)this.pastTasks[s].id===e.id&&this.pastTasks.splice(s,1);else if(i===this.today)for(let s=0;s<this.todayTasks.length;s++)this.todayTasks[s].id===e.id&&this.todayTasks.splice(s,1);else if(i>this.today)for(let s=0;s<this.futureTasks.length;s++)this.futureTasks[s].id===e.id&&this.futureTasks.splice(s,1);for(let s=0;s<this.filteredTaskList.length;s++)this.filteredTaskList[s].id===e.id&&this.filteredTaskList.splice(s,1)}openReminderModal(e){this.selectedTask=e,$("#reminderModal").modal("show")}editReminder(e){let i=parseInt(a()(e.reminder,"yyyy-MM-DD").format("yyyyMMDD")),s=0;if(this.taskList=this.taskService.getTaskList(),e.pinned)for(let t=0;t<this.pinnedTaskList.length;t++)this.pinnedTaskList[t].id===e.id&&this.pinnedTaskList[t].reminder!==e.reminder&&(this.pinnedTaskList[t].reminder=e.reminder);else{for(let t=0;t<this.taskList.length;t++)if(this.taskList[t].id===e.id)if(s=parseInt(a()(this.taskList[t].reminder,"yyyy-MM-DD").format("yyyyMMDD")),s<this.today)for(let n=0;n<this.pastTasks.length;n++)this.pastTasks[n].id===e.id&&this.pastTasks.splice(n,1);else if(s===this.today)for(let n=0;n<this.todayTasks.length;n++)this.todayTasks[n].id===e.id&&this.todayTasks.splice(n,1);else if(s>this.today)for(let n=0;n<this.futureTasks.length;n++)this.futureTasks[n].id===e.id&&this.futureTasks.splice(n,1);i<this.today?this.pastTasks.push(e):i===this.today?(e.dateStatus="today",this.todayTasks.push(e)):i>this.today&&this.futureTasks.push(e)}this.taskService.editReminder(e,this.taskList),$("#reminderModal").modal("hide")}filter(e){e&&(this.filteredTaskList=e)}search(e){this.searchValue=e}};d.ctorParameters=()=>[{type:c.M}],d=(0,p.gn)([(0,f.wA2)({selector:"app-reminders",template:'\x3c!-- Search --\x3e\r\n<app-search [taskList]="filteredReminderTasks"\r\n            (filter)="filter($event)"\r\n            (searching)="search($event)">\r\n</app-search>\r\n\x3c!-- Filtered Task Menu --\x3e\r\n<div *ngIf="filteredTaskList?.length && searchValue">\r\n  <app-task-list [defaultTaskList]="taskList"\r\n                 [showedTaskList]="filteredTaskList"\r\n                 (delete)="deleteTask($event)"\r\n                 (openReminder)="openReminderModal($event)"\r\n                 (archive)="archiveTask($event)"\r\n                 (pin)="togglePinTask($event)"\r\n                 (complete)="taskCompleted($event)">\r\n  </app-task-list>\r\n</div>\r\n\x3c!-- Filtered Error Msg --\x3e\r\n<div *ngIf="!filteredTaskList?.length && searchValue" class="py-3">\r\n  <div class="alert alert-primary alert-danger w-75 mx-auto">\r\n    There is no task with that name!!\r\n  </div>\r\n</div>\r\n\x3c!-- All Reminder Tasks --\x3e\r\n<div *ngIf="!filteredTaskList?.length && !searchValue">\r\n  \x3c!-- Pinned Task List --\x3e\r\n  <div class="mb-5" *ngIf="pinnedTaskList?.length">\r\n    <div class="alert-warning p-3 mb-4 w-100">\r\n      <img src="./assets/icons/pin-warning.svg" width="20" height="20" />\r\n      <span class="ms-2 text-warning">Pin</span>\r\n    </div>\r\n    \x3c!-- Task List Menu --\x3e\r\n    <app-task-list [defaultTaskList]="taskList"\r\n                   [showedTaskList]="pinnedTaskList"\r\n                   (delete)="deleteTask($event)"\r\n                   (openReminder)="openReminderModal($event)"\r\n                   (archive)="archiveTask($event)"\r\n                   (pin)="togglePinTask($event)"\r\n                   (complete)="taskCompleted($event)">\r\n    </app-task-list>\r\n  </div>\r\n  \x3c!-- Reminder Task List --\x3e\r\n  <div *ngIf="reminderTaskList?.length">\r\n    \x3c!-- Today Task List --\x3e\r\n    <div *ngIf="todayTasks?.length" class="mb-4">\r\n      <div class="bg-light p-3 mb-4 w-100">\r\n        <img src="./assets/icons/time.svg" width="20" height="20" />\r\n        <span class="ms-2">Today</span>\r\n      </div>\r\n      \x3c!-- Task List Menu --\x3e\r\n      <app-task-list [defaultTaskList]="taskList"\r\n                     [showedTaskList]="todayTasks"\r\n                     (delete)="deleteTask($event)"\r\n                     (openReminder)="openReminderModal($event)"\r\n                     (archive)="archiveTask($event)"\r\n                     (pin)="togglePinTask($event)"\r\n                     (complete)="taskCompleted($event)">\r\n      </app-task-list>\r\n    </div>\r\n    \x3c!-- Future Task List --\x3e\r\n    <div *ngIf="futureTasks?.length" class="mb-4">\r\n      <div class="alert-info p-3 mb-4 w-100">\r\n        <img src="./assets/icons/future.svg" width="20" height="20" />\r\n        <span class="ms-2 text-info">Future</span>\r\n      </div>\r\n      \x3c!-- Task List Menu --\x3e\r\n      <app-task-list [defaultTaskList]="taskList"\r\n                     [showedTaskList]="futureTasks"\r\n                     (delete)="deleteTask($event)"\r\n                     (openReminder)="openReminderModal($event)"\r\n                     (archive)="archiveTask($event)"\r\n                     (pin)="togglePinTask($event)"\r\n                     (complete)="taskCompleted($event)">\r\n      </app-task-list>\r\n    </div>\r\n    \x3c!-- Past Task List --\x3e\r\n    <div *ngIf="pastTasks?.length" class="mb-4">\r\n      <div class="alert-danger p-3 mb-4 w-100">\r\n        <img src="./assets/icons/tasks.svg" width="20" height="20" />\r\n        <span class="ms-2 text-danger">Past</span>\r\n      </div>\r\n      \x3c!-- Task List Menu --\x3e\r\n      <app-task-list [defaultTaskList]="taskList"\r\n                     [showedTaskList]="pastTasks"\r\n                     (delete)="deleteTask($event)"\r\n                     (openReminder)="openReminderModal($event)"\r\n                     (archive)="archiveTask($event)"\r\n                     (pin)="togglePinTask($event)"\r\n                     (complete)="taskCompleted($event)">\r\n      </app-task-list>\r\n    </div>\r\n  </div>\r\n\r\n  \x3c!-- Edit Reminder Task Modal --\x3e\r\n  <div class="modal fade" id="reminderModal" tabindex="-1" aria-hidden="true">\r\n    <div class="modal-dialog modal-dialog-centered">\r\n      <div class="modal-content">\r\n        <app-edit-reminder [selectedTask]="selectedTask"\r\n                           (edit)="editReminder($event)">\r\n        </app-edit-reminder>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n',styles:[m]})],d);var u=r(3568),v=r(7516);const g=[{path:"reminders",component:d}];let l=class{};l=(0,p.gn)([(0,f.LVF)({declarations:[d],imports:[T.ez,u.Bz.forChild(g),v.m]})],l)},2965:h=>{h.exports=".task-menu {\n  cursor: pointer;\n}\n.task-menu:hover {\n  background-color: #457AFB33;\n}\n.pinned {\n  border-left-width: 15px !important;\n  border-left-color: orange !important;\n}\n.color-menu {\n  cursor: pointer;\n}\n.color-menu:hover {\n  background-color: #457AFB33;\n}\n.color-circle {\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  border: 0.5px solid #0d6efd;\n}"}}]);
//# sourceMappingURL=src_app_components_dashboard_components_tasks_reminders_reminders_module_ts.5cbc2b5f467b81c8de10.js.map