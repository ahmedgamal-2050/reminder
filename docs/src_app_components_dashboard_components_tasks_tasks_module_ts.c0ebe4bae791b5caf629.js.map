{"version":3,"mappings":"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","names":["n","constructor","s","this","a","ngOnInit","taskForm","fb","group","taskName","r","category","reminder","ngOnChanges","selectedTask","currentValue","patchValue","submitTask","dirty","valid","task","id","value","pinned","archived","deleted","done","showMenu","editTask","emit","parseInt","Math","random","toFixed","addTask","reset","markAsTouched","markAsDirty","get","l","selector","template","d","taskList","taskService","getTaskList","openModal","$","modal","createTask","push","updateTask","alert","i","length","filter","filteredTaskList","search","searchValue","openReminderModal","editReminder","y","f","path","component","loadChildren","t","then","e","RemindersModule","MyPocketModule","ArchiveModule","TrashModule","m","declarations","imports","h","k","g"],"sources":["./src/app/components/dashboard/components/tasks/edit-task/edit-task.component.ts","./src/app/components/dashboard/components/tasks/edit-task/edit-task.component.html","./src/app/components/dashboard/components/tasks/all-tasks/all-tasks.component.ts","./src/app/components/dashboard/components/tasks/all-tasks/all-tasks.component.html","./src/app/components/dashboard/components/tasks/tasks.module.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Task } from '../../tasks';\r\n\r\n@Component({\r\n  selector: 'app-edit-task',\r\n  templateUrl: './edit-task.component.html',\r\n  styleUrls: ['./edit-task.component.scss']\r\n})\r\nexport class EditTaskComponent implements OnInit, OnChanges {\r\n  public taskForm!: FormGroup;\r\n  public task!: Task;\r\n  @Input() public taskList?: Task[];\r\n  @Input() public selectedTask!: Task;\r\n  @Output() public addTask = new EventEmitter<Task>();\r\n  @Output() public editTask = new EventEmitter<Task>();\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.taskForm = this.fb.group({\r\n      taskName: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(3),\r\n          Validators.pattern('^[أ-يa-zA-Z].*'),\r\n          Validators.maxLength(50)\r\n        ]\r\n      ],\r\n      category: [\r\n        '',\r\n        [\r\n          Validators.minLength(3),\r\n          Validators.pattern('^[أ-يa-zA-Z].*'),\r\n          Validators.maxLength(50)\r\n        ]\r\n      ],\r\n      reminder: ['']\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.selectedTask = changes.selectedTask.currentValue as Task;\r\n\r\n    if (this.selectedTask) {\r\n      this.taskForm.patchValue({\r\n        taskName: this.selectedTask.taskName,\r\n        category: this.selectedTask.category,\r\n        reminder: this.selectedTask.reminder\r\n      });\r\n    }\r\n  }\r\n\r\n  submitTask() {\r\n    if (this.taskForm.dirty && this.taskForm.valid) {\r\n      if (this.selectedTask) {\r\n        this.task = {\r\n          id: this.selectedTask.id,\r\n          taskName: this.taskForm.value.taskName,\r\n          category: this.taskForm.value.category,\r\n          reminder: this.taskForm.value.reminder,\r\n          pinned: this.selectedTask.pinned,\r\n          archived: this.selectedTask.archived,\r\n          deleted: this.selectedTask.deleted,\r\n          done: this.selectedTask.done,\r\n          showMenu: this.selectedTask.showMenu\r\n        }\r\n        this.editTask.emit(this.task);\r\n      } else {\r\n        let randomNum = parseInt((Math.random() * 10000000).toFixed());\r\n        this.task = {\r\n          id: randomNum,\r\n          taskName: this.taskForm.value.taskName,\r\n          category: this.taskForm.value.category,\r\n          reminder: this.taskForm.value.reminder,\r\n          pinned: false,\r\n          archived: false,\r\n          deleted: false,\r\n          done: false,\r\n          showMenu: false\r\n        }\r\n        this.addTask.emit(this.task);\r\n      }\r\n      this.taskForm.reset();\r\n    } else {\r\n      this.taskForm.markAsTouched();\r\n      this.taskForm.markAsDirty();\r\n    }\r\n  }\r\n\r\n  get taskName() {\r\n    return this.taskForm.get('taskName');\r\n  }\r\n\r\n  get category() {\r\n    return this.taskForm.get('category');\r\n  }\r\n}\r\n","export default \"<form [formGroup]=\\\"taskForm\\\" (submit)=\\\"submitTask()\\\" novalidate>\\r\\n  <div class=\\\"modal-header\\\">\\r\\n    <h5 class=\\\"modal-title\\\" id=\\\"staticBackdropLabel\\\">{{ selectedTask ? 'Edit' : 'Create'}} Task</h5>\\r\\n    <button type=\\\"button\\\" class=\\\"btn-close\\\" data-bs-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"></button>\\r\\n  </div>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-12 mb-3\\\">\\r\\n        <label for=\\\"taskName\\\" class=\\\"mb-1\\\">Task Name <span class=\\\"text-danger\\\">*</span></label>\\r\\n        <input type=\\\"text\\\" id=\\\"taskName\\\" class=\\\"form-control\\\"\\r\\n               placeholder=\\\"Task Name\\\" formControlName=\\\"taskName\\\"\\r\\n               [ngClass]=\\\"taskName?.invalid && (taskName?.dirty || taskName?.touched) ? 'border-danger':''\\\">\\r\\n        <div *ngIf=\\\"taskName?.invalid && (taskName?.dirty || taskName?.touched)\\\" class=\\\"text-danger\\\">\\r\\n          <div *ngIf=\\\"taskName.errors && taskName.errors.required\\\">\\r\\n            Task Name is required.\\r\\n          </div>\\r\\n          <div *ngIf=\\\"taskName.errors && taskName.errors.minlength\\\">\\r\\n            Task Name must be at least 3 characters.\\r\\n          </div>\\r\\n          <div *ngIf=\\\"taskName.errors && taskName.errors.maxLength\\\">\\r\\n            Task Name must be 50 characters maximum.\\r\\n          </div>\\r\\n          <div *ngIf=\\\"taskName.errors && taskName.errors.pattern\\\">\\r\\n            Task Name must start with a character.\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-12 mb-3\\\">\\r\\n        <label for=\\\"category\\\" class=\\\"mb-1\\\">Category <span class=\\\"text-danger\\\">*</span></label>\\r\\n        <input type=\\\"text\\\" id=\\\"category\\\" class=\\\"form-control\\\"\\r\\n               placeholder=\\\"Category\\\" formControlName=\\\"category\\\"\\r\\n               [ngClass]=\\\"category?.invalid && (category?.dirty || category?.touched) ? 'border-danger':''\\\">\\r\\n        <div *ngIf=\\\"category?.invalid && (category?.dirty || category?.touched)\\\" class=\\\"text-danger\\\">\\r\\n          <div *ngIf=\\\"category.errors && category.errors.minlength\\\">\\r\\n            Category must be at least 3 characters.\\r\\n          </div>\\r\\n          <div *ngIf=\\\"category.errors && category.errors.maxLength\\\">\\r\\n            Category must be 50 characters maximum.\\r\\n          </div>\\r\\n          <div *ngIf=\\\"category.errors && category.errors.maxLength\\\">\\r\\n            Category must be 50 characters maximum.\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-12 mb-3\\\">\\r\\n        <label for=\\\"reminder\\\" class=\\\"mb-1\\\">Reminder (Optional)</label>\\r\\n        <input type=\\\"date\\\" id=\\\"reminder\\\" class=\\\"form-control\\\"\\r\\n               placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"reminder\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"modal-footer\\\">\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-bs-dismiss=\\\"modal\\\">Close</button>\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Submit</button>\\r\\n  </div>\\r\\n</form>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { TaskService } from '../../task.service';\r\nimport { Task } from '../../tasks';\r\ndeclare let $: any;\r\n\r\n@Component({\r\n  selector: 'app-all-tasks',\r\n  templateUrl: './all-tasks.component.html',\r\n  styleUrls: ['./all-tasks.component.scss']\r\n})\r\nexport class AllTasksComponent implements OnInit {\r\n  public taskList: Task[] = [];\r\n  public selectedTask!: Task;\r\n  public emptyTask!: Task;\r\n  public filteredTaskList: Task[] = [];\r\n  public searchValue: string = '';\r\n  public colorList: string[] = ['light', 'info', 'primary', 'warning', 'danger', 'success', 'secondary'];\r\n\r\n  constructor(private taskService: TaskService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.taskList = this.taskService.getTaskList();\r\n    //console.log(this.taskList);\r\n  }\r\n\r\n  openModal(task: Task) {\r\n    this.selectedTask = task;\r\n    $(\"#taskModal\").modal('show');\r\n  }\r\n\r\n  createTask(task: Task) {\r\n    this.taskList.push(task);\r\n    this.taskService.updateTask(this.taskList);\r\n    $(\"#taskModal\").modal('hide');\r\n    alert(`${task.taskName} task created successfully`);\r\n  }\r\n\r\n  editTask(task: Task) {\r\n    for (let i = 0; i < this.taskList.length; i++) {\r\n      if (this.taskList[i].id === task.id) {\r\n        this.taskList[i] = task;\r\n        this.taskList[i].showMenu = false;\r\n      }\r\n    }\r\n    this.taskService.updateTask(this.taskList);\r\n    $(\"#taskModal\").modal('hide');\r\n    alert(`${task.taskName} task updated successfully`);\r\n  }\r\n\r\n  filter(filteredTaskList: Task[]) {\r\n    if (filteredTaskList) {\r\n      this.filteredTaskList = filteredTaskList;\r\n    }\r\n  }\r\n\r\n  search(searching: string) {\r\n    this.searchValue = searching;\r\n  }\r\n\r\n  openReminderModal(task: Task) {\r\n    this.selectedTask = task\r\n    $(\"#reminderModal\").modal('show');\r\n  }\r\n\r\n  editReminder(task: Task) {\r\n    this.taskService.editReminder(task, this.taskList);\r\n    $(\"#reminderModal\").modal('hide');\r\n  }\r\n}\r\n","export default \"<!-- Search -->\\r\\n<app-search [taskList]=\\\"taskList\\\"\\r\\n            (filter)=\\\"filter($event)\\\"\\r\\n            (searching)=\\\"search($event)\\\">\\r\\n</app-search>\\r\\n<!-- Page Title -->\\r\\n<div class=\\\"bg-light p-3 mb-4 w-100\\\">\\r\\n  <img src=\\\"../../../../../assets/icons/tasks.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n  <span class=\\\"ms-2 text-primary\\\">Tasks</span>\\r\\n</div>\\r\\n<!-- Page Content -->\\r\\n<!-- Create New Task -->\\r\\n<div class=\\\"row mx-auto justify-content-between rounded w-75 create-task mb-2\\\"\\r\\n     (click)=\\\"openModal(emptyTask)\\\">\\r\\n  <div class=\\\"col-auto p-3\\\">\\r\\n    <img src=\\\"../../../../../assets/icons/create.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n    <span class=\\\"ps-3\\\">Create New Task</span>\\r\\n  </div>\\r\\n  <div class=\\\"col-auto\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-auto p-3\\\">\\r\\n        <img src=\\\"../../../../../assets/icons/more-black.svg\\\" width=\\\"20\\\" height=\\\"20\\\" />\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- Filtered Task Menu -->\\r\\n<div *ngIf=\\\"filteredTaskList?.length && searchValue\\\">\\r\\n  <app-task-list [defaultTaskList]=\\\"taskList\\\"\\r\\n                 [showedTaskList]=\\\"filteredTaskList\\\"\\r\\n                 (openReminder)=\\\"openReminderModal($event)\\\">\\r\\n  </app-task-list>\\r\\n</div>\\r\\n<!-- Filtered Error Msg -->\\r\\n<div *ngIf=\\\"!filteredTaskList?.length && searchValue\\\" class=\\\"py-3\\\">\\r\\n  <div class=\\\"alert alert-primary alert-danger w-75 mx-auto\\\">\\r\\n    There is no task with that name!!\\r\\n  </div>\\r\\n</div>\\r\\n<!-- All Task Menu -->\\r\\n<div *ngIf=\\\"!filteredTaskList?.length && !searchValue\\\">\\r\\n  <app-task-list [defaultTaskList]=\\\"taskList\\\"\\r\\n                 [showedTaskList]=\\\"taskList\\\"\\r\\n                 (openReminder)=\\\"openReminderModal($event)\\\">\\r\\n  </app-task-list>\\r\\n</div>\\r\\n\\r\\n<!-- Create/Edit Task Modal -->\\r\\n<div class=\\\"modal fade\\\" id=\\\"taskModal\\\" tabindex=\\\"-1\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <app-edit-task (addTask)=\\\"createTask($event)\\\"\\r\\n                     (editTask)=\\\"editTask($event)\\\"\\r\\n                     [taskList]=\\\"taskList\\\"\\r\\n                     [selectedTask]=\\\"selectedTask\\\">\\r\\n      </app-edit-task>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- Edit Reminder Task Modal -->\\r\\n<div class=\\\"modal fade\\\" id=\\\"reminderModal\\\" tabindex=\\\"-1\\\" aria-hidden=\\\"true\\\">\\r\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <app-edit-reminder [selectedTask]=\\\"selectedTask\\\"\\r\\n                         (edit)=\\\"editReminder($event)\\\">\\r\\n      </app-edit-reminder>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { EditTaskComponent } from './edit-task/edit-task.component';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { AllTasksComponent } from './all-tasks/all-tasks.component';\r\n\r\nconst tasksRoutes: Routes = [\r\n  {\r\n    path: 'tasks',\r\n    component: AllTasksComponent\r\n  },\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../tasks/reminders/reminders.module').then(m => m.RemindersModule)\r\n  },\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../tasks/my-pocket/my-pocket.module').then(m => m.MyPocketModule)\r\n  },\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../tasks/archive/archive.module').then(m => m.ArchiveModule)\r\n  },\r\n  {\r\n    path: '',\r\n    loadChildren: () => import('../tasks/trash/trash.module').then(m => m.TrashModule)\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AllTasksComponent,\r\n    EditTaskComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(tasksRoutes),\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n  ]\r\n})\r\nexport class TasksModule { }\r\n"],"sourceRoot":"webpack:///","file":"src_app_components_dashboard_components_tasks_tasks_module_ts.c0ebe4bae791b5caf629.js"}